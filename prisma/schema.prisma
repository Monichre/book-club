generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model authors {
  id           BigInt         @id @default(autoincrement())
  name         String         @db.VarChar(100)
  gender       Boolean?
  birth_year   Int?           @db.SmallInt
  death_year   Int?           @db.SmallInt
  book_authors book_authors[]
}

model book_authors {
  id        BigInt  @id @default(autoincrement())
  book_id   BigInt
  author_id BigInt
  authors   authors @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  books     books   @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model book_club {
  id         BigInt            @id @default(autoincrement())
  book_id    BigInt
  name       String?           @unique
  image_url  String?
  status     book_club_status?
  public     Boolean?          @default(true)
  created_at DateTime          @db.Timestamptz(6)
  owner_id   String            @db.Uuid
  books      books             @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users             @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model books {
  id           BigInt         @id @default(autoincrement())
  title        String
  genre        book_genre?
  published_at DateTime       @db.Timestamptz(6)
  book_authors book_authors[]
  book_club    book_club[]
}

model channels {
  id          BigInt     @id @default(autoincrement())
  inserted_at DateTime   @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  slug        String     @unique
  created_by  String     @db.Uuid
  users       users      @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages    messages[]
}

model messages {
  id          BigInt   @id @default(autoincrement())
  inserted_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  message     String?
  user_id     String   @db.Uuid
  channel_id  BigInt
  channels    channels @relation(fields: [channel_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model role_permissions {
  id         BigInt         @id @default(autoincrement())
  role       app_role
  permission app_permission

  @@unique([role, permission])
}

model user_roles {
  id      BigInt   @id @default(autoincrement())
  user_id String   @db.Uuid
  role    app_role
  users   users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, role])
}

model users {
  status     user_status? @default(OFFLINE)
  id         String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at DateTime?    @db.Timestamptz(6)
  username   String?      @unique
  full_name  String?
  avatar_url String?
  book_club  book_club[]
  channels   channels[]
  messages   messages[]
  user_roles user_roles[]
}

enum app_permission {
  channels_delete @map("channels.delete")
  messages_delete @map("messages.delete")
}

enum app_role {
  admin
  owner
  moderator
  member
}

enum book_club_status {
  OPEN
  CLOSED
}

enum book_genre {
  Magazine
  Novel
  Life
  Arts
  Comics
  Education___Reference        @map("Education & Reference")
  Humanities___Social_Sciences @map("Humanities & Social Sciences")
  Science___Technology         @map("Science & Technology")
  Kids
  Sports
}

enum user_status {
  ONLINE
  OFFLINE
}
